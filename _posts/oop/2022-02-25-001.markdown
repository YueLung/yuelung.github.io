---
layout: post
title: 策略模式(Strategy Pattern)
date: 2022-02-25 22:02:23 +0800
category: OOP
---
## 策略模式
> 避免使用一堆if else
> 擴充容易
   
   
### 情境:
製作一個AI下棋，設計3種難度，未來可能要再增加.  

先設計一個角色介面.
```c#
public Interface IRole
{
	void onMyTurn();
}
```
新增需要的角色，並實作該角色action.
若以後需要增角色，只需要增加class，就不會動到原本的程式碼.
```c#
public class HumanPlayer : IRole
{
	void onMyTurn()
	{
		// do something 
	}
}

public clas EasyAi : IRole
{
	void onMyTurn()
	{
		// some easy algorithm
	}
}

public clas MediumAi : IRole
{
	void onMyTurn()
	{
		// some Medium algorithm
	}
}

public clas HardAi : IRole
{
	void onMyTurn()
	{
		// some Hard algorithm
	}
}
```
建造一個角色工廠.
```c#
enum RoleType{ HumanPlayer, EasyAi, MediumAi, HardAi }

public static class PlayerFactory
{
	public static IRole CreatePlayer(RoleType type)
	{
		switch (type)
		{
			case RoleType.HumanPlayer:
				return new HumanPlayer();
				break;
			case RoleType.EasyAi:
				return new EasyAi();
				break;
			case RoleType.MediumAi:
				return new MediumAi();
				break;
			case RoleType.HardAi:
				return new HardAi();
				break;				
			default:
				return null;
				break;
		}
	}
}
```
一個遊戲管理者，之後若有角色新增，都不應該動到這裡的程式碼.
```c#
public class GameMgr 
{
	private IRole role1;
	private IRole role2;
	
	public GameMgr(RoleType roleType1, RoleType roleType2)
	{
		role1 = PlayerFactory.CreatePlayer(roleType1);
		role2 = PlayerFactory.CreatePlayer(roleType2);
		
		start();
	}
	
	private start()
	{
		role1.onMyTurn();
	}
}

```
